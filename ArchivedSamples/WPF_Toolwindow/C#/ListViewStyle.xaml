<!--
 
Copyright (c) Microsoft Corporation. All rights reserved.
THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.

-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vsp="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0">
    <!-- Defines themes for ListView.  This theme is tied into dynamic Visual Studio colors, so
         when the Visual Studio theme changes between Light, Dark, High Contrast, or a custom theme,
         the ListView's style updates accordingly. -->
  
    <!-- ListView Item Control Template -->
    <ControlTemplate x:Key="ListViewItemTemplate" TargetType="{x:Type ListViewItem}">
        <!-- Simplified template of the default List*View* Style, removes much of the chrome -->
        <Border SnapsToDevicePixels="True" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" Margin="{TemplateBinding Margin}">
            <GridViewRowPresenter Grid.RowSpan="2"   
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"   
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Border>
        <ControlTemplate.Triggers>
            <!-- Selected -->
            <Trigger Property="IsSelected" Value="True">
                <!-- A subset of TreeViewColors are used for applying styles to the ListView.  A TreeView is
                     has a superset of the colors required by a ListView (for expanders). -->
                <Setter Property="Background" Value="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemActiveBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemActiveTextBrushKey}}" />
            </Trigger>

            <!-- Selected but not active (control focused) -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemInactiveBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemInactiveTextBrushKey}}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- List View Item Style -->
    <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Padding" Value="2" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template" Value="{StaticResource ListViewItemTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsp:EnvironmentColors.CommandBarTextActiveBrushKey}}" />
    </Style>

    <!-- List View Column Header Gripper Control Temlate -->
    <ControlTemplate x:Key="GridViewColumnHeaderGripperTemplate" TargetType="{x:Type Thumb}">
        <Border Padding="{TemplateBinding Padding}" Background="Transparent">
            <Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Background}"/>
        </Border>
    </ControlTemplate>

    <!-- ListView Gripper Style -->
    <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static vsp:HeaderColors.SeparatorLineBrushKey}}"/>
        <Setter Property="Template" Value="{StaticResource GridViewColumnHeaderGripperTemplate}" />
    </Style>

    <!-- Listview Grid header column style -->
    <ControlTemplate x:Key="GridViewColumnHeaderTemplate" TargetType="GridViewColumnHeader">
        <Grid>
            <Border Name="HeaderBorder" Padding="{TemplateBinding Padding}" BorderThickness="0,0,0,1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Margin="0">
                <ContentPresenter Name="HeaderContent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
            <!-- Note the negative margin on the thumb, which gives the gripper a bigger hit area than the actual visual appearance -->
            <Thumb x:Name="PART_HeaderGripper" HorizontalAlignment="Right" Margin="0,0,-4,0" Style="{StaticResource GridViewColumnHeaderGripper}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <!-- Hover -->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource {x:Static vsp:HeaderColors.MouseOverBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsp:HeaderColors.MouseOverTextBrushKey}}"/>
            </Trigger>

            <!-- Clicked (Mouse down) -->
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{DynamicResource {x:Static vsp:HeaderColors.MouseDownBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsp:HeaderColors.MouseDownTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ListView Grid header glyph style -->
    <Style TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{DynamicResource {x:Static vsp:HeaderColors.GlyphBrushKey}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type GridViewColumnHeader}}}" Value="True">
                <Setter Property="Fill" Value="{DynamicResource {x:Static vsp:HeaderColors.MouseOverGlyphBrushKey}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type GridViewColumnHeader}}}" Value="True">
                <Setter Property="Fill" Value="{DynamicResource {x:Static vsp:HeaderColors.MouseDownGlyphBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ListView Style -->
    <Style TargetType="{x:Type ListView}">
        <Style.Resources>
            <!-- Override the template for the scrollviewer to adjust the margins on the header of the list view -->
            <!-- Default WPF styles give you 2px left and right padding on the header row. -->
            <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="ScrollViewer">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ScrollViewer">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <DockPanel Margin="{TemplateBinding Padding}">
                                    <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Focusable="false">
                                        <GridViewHeaderRowPresenter Margin="0" 
                                                                        Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                        ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                                                        ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                                                        ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                                                        AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                                                        ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                                        ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>

                                    <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                                                KeyboardNavigation.DirectionalNavigation="Local"
                                                                CanContentScroll="True"
                                                                CanHorizontallyScroll="False"
                                                                CanVerticallyScroll="False" />
                                </DockPanel>

                                <ScrollBar Name="PART_HorizontalScrollBar"
                                               Orientation="Horizontal"
                                               Grid.Row="1"
                                               Maximum="{TemplateBinding ScrollableWidth}"
                                               ViewportSize="{TemplateBinding ViewportWidth}"
                                               Value="{TemplateBinding HorizontalOffset}"
                                               Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />

                                <ScrollBar Name="PART_VerticalScrollBar"
                                               Grid.Column="1"
                                               Maximum="{TemplateBinding ScrollableHeight}"
                                               ViewportSize="{TemplateBinding ViewportHeight}"
                                               Value="{TemplateBinding VerticalOffset}"
                                               Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />

                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Style for header columns -->
            <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsp:HeaderColors.DefaultTextBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vsp:HeaderColors.DefaultBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsp:HeaderColors.SeparatorLineBrushKey}}"/>
                <Setter Property="Padding" Value="8,4,4,4" />
                <Setter Property="Template" Value="{StaticResource GridViewColumnHeaderTemplate}" />
            </Style>
        </Style.Resources>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListViewItemStyle}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource {x:Static vsp:TreeViewColors.BackgroundBrushKey}}" />
    </Style>
</ResourceDictionary>